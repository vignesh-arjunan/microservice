/*
 * This file is generated by jOOQ.
 */
package org.jooq.h2.generated.tables.records;


import java.math.BigDecimal;
import java.sql.Timestamp;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.h2.generated.tables.Transfers;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransfersRecord extends UpdatableRecordImpl<TransfersRecord> implements Record6<Long, Long, Long, BigDecimal, Timestamp, String> {

    private static final long serialVersionUID = -531789740;

    /**
     * Setter for <code>PUBLIC.TRANSFERS.ID</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.TRANSFERS.ID</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>PUBLIC.TRANSFERS.FROM_ACCOUNT</code>.
     */
    public void setFromAccount(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.TRANSFERS.FROM_ACCOUNT</code>.
     */
    public Long getFromAccount() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>PUBLIC.TRANSFERS.TO_ACCOUNT</code>.
     */
    public void setToAccount(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>PUBLIC.TRANSFERS.TO_ACCOUNT</code>.
     */
    public Long getToAccount() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>PUBLIC.TRANSFERS.AMOUNT</code>.
     */
    public void setAmount(BigDecimal value) {
        set(3, value);
    }

    /**
     * Getter for <code>PUBLIC.TRANSFERS.AMOUNT</code>.
     */
    public BigDecimal getAmount() {
        return (BigDecimal) get(3);
    }

    /**
     * Setter for <code>PUBLIC.TRANSFERS.AT</code>.
     */
    public void setAt(Timestamp value) {
        set(4, value);
    }

    /**
     * Getter for <code>PUBLIC.TRANSFERS.AT</code>.
     */
    public Timestamp getAt() {
        return (Timestamp) get(4);
    }

    /**
     * Setter for <code>PUBLIC.TRANSFERS.COMMENT</code>.
     */
    public void setComment(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>PUBLIC.TRANSFERS.COMMENT</code>.
     */
    public String getComment() {
        return (String) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, Long, BigDecimal, Timestamp, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<Long, Long, Long, BigDecimal, Timestamp, String> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Transfers.TRANSFERS.ID;
    }

    @Override
    public Field<Long> field2() {
        return Transfers.TRANSFERS.FROM_ACCOUNT;
    }

    @Override
    public Field<Long> field3() {
        return Transfers.TRANSFERS.TO_ACCOUNT;
    }

    @Override
    public Field<BigDecimal> field4() {
        return Transfers.TRANSFERS.AMOUNT;
    }

    @Override
    public Field<Timestamp> field5() {
        return Transfers.TRANSFERS.AT;
    }

    @Override
    public Field<String> field6() {
        return Transfers.TRANSFERS.COMMENT;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getFromAccount();
    }

    @Override
    public Long component3() {
        return getToAccount();
    }

    @Override
    public BigDecimal component4() {
        return getAmount();
    }

    @Override
    public Timestamp component5() {
        return getAt();
    }

    @Override
    public String component6() {
        return getComment();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getFromAccount();
    }

    @Override
    public Long value3() {
        return getToAccount();
    }

    @Override
    public BigDecimal value4() {
        return getAmount();
    }

    @Override
    public Timestamp value5() {
        return getAt();
    }

    @Override
    public String value6() {
        return getComment();
    }

    @Override
    public TransfersRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public TransfersRecord value2(Long value) {
        setFromAccount(value);
        return this;
    }

    @Override
    public TransfersRecord value3(Long value) {
        setToAccount(value);
        return this;
    }

    @Override
    public TransfersRecord value4(BigDecimal value) {
        setAmount(value);
        return this;
    }

    @Override
    public TransfersRecord value5(Timestamp value) {
        setAt(value);
        return this;
    }

    @Override
    public TransfersRecord value6(String value) {
        setComment(value);
        return this;
    }

    @Override
    public TransfersRecord values(Long value1, Long value2, Long value3, BigDecimal value4, Timestamp value5, String value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TransfersRecord
     */
    public TransfersRecord() {
        super(Transfers.TRANSFERS);
    }

    /**
     * Create a detached, initialised TransfersRecord
     */
    public TransfersRecord(Long id, Long fromAccount, Long toAccount, BigDecimal amount, Timestamp at, String comment) {
        super(Transfers.TRANSFERS);

        set(0, id);
        set(1, fromAccount);
        set(2, toAccount);
        set(3, amount);
        set(4, at);
        set(5, comment);
    }
}
